{"version":3,"sources":["component/Coin_ui.jsx","component/Coin.jsx","component/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Coin_ui","src","this","props","info","imgSrc","alt","altSide","Component","Coin","state","currCoin","nHeads","nTails","clickCount","handleClick","bind","arr","newCoin","coins","Math","floor","random","length","setState","st","e","flipCoin","className","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAceA,E,iLARP,OACI,6BACI,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,OAAQC,IAAKJ,KAAKC,MAAMC,KAAKG,e,GAJjDC,aCIhBC,E,YAQF,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,WAAY,GAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,wEAYf,IC5BQC,ED4BFC,GC5BED,ED4Bef,KAAKC,MAAMgB,OC3BtBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SD4B3CrB,KAAKsB,UAAS,SAAAC,GACZ,MAAO,CACLd,SAAUO,EACVJ,WAAYW,EAAGX,WAAa,EAC5BF,OAAQa,EAAGb,QAA8B,UAApBM,EAAQX,QAAsB,EAAI,GACvDM,OAAQY,EAAGZ,QAA8B,UAApBK,EAAQX,QAAsB,EAAI,S,kCAInDmB,GACRxB,KAAKyB,a,+BAGL,OACI,yBAAKC,UAAU,QACX,kDACC1B,KAAKQ,MAAMC,UAAY,kBAAC,EAAD,CAASP,KAAMF,KAAKQ,MAAMC,WAClD,4BAAQkB,QAAS3B,KAAKa,aAAtB,SACA,qCAAU,8BAAOb,KAAKQ,MAAMI,YAA5B,2BAAsE,8BAAOZ,KAAKQ,MAAME,QAAxF,eAAkH,8BAAOV,KAAKQ,MAAMG,QAApI,e,GAvCGL,aAAbC,EAEKqB,aAAe,CACtBX,MAAO,CACC,CAACZ,QAAQ,QAASF,OAAQ,sFAC1B,CAACE,QAAQ,QAASF,OAAQ,kIAwCvBI,QEzCAsB,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0eedcdd5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './coin.css'\r\n\r\n\r\nclass Coin_ui extends Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <img src={this.props.info.imgSrc} alt={this.props.info.altSide}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Coin_ui;","import React, { Component } from 'react'\r\nimport { choice } from \"./helpers\";\r\nimport Coin_ui from './Coin_ui'\r\nimport './coin.css';\r\n\r\n\r\n\r\n\r\nclass Coin extends Component {\r\n\r\n    static defaultProps = {\r\n    coins: [\r\n            {altSide:'heads', imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/c/cd/S_Half_Dollar_Obverse_2016.jpg'},\r\n            {altSide:'tails', imgSrc: 'https://www.magicdream.fr/media/catalog/product/cache/c5fb795b21623ff3de23c6f019a4396d/m/a/magie-piece-demi-dollar-aigle.jpg'}\r\n        ]\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            currCoin: null,\r\n            nHeads: 0,\r\n            nTails: 0,\r\n            clickCount: 0\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    flipCoin(){\r\n        const newCoin = choice(this.props.coins);\r\n        this.setState(st => {\r\n          return {\r\n            currCoin: newCoin,\r\n            clickCount: st.clickCount + 1,\r\n            nHeads: st.nHeads + (newCoin.altSide === \"heads\" ? 1 : 0),\r\n            nTails: st.nTails + (newCoin.altSide === \"tails\" ? 1 : 0)\r\n          };\r\n        });\r\n    }\r\n    handleClick(e){\r\n        this.flipCoin()\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"main\">                \r\n                <h2>Let's Flip A Coin!</h2>\r\n                {this.state.currCoin && <Coin_ui info={this.state.currCoin} />}\r\n                <button onClick={this.handleClick}>Click</button>\r\n                <p>Out of <span>{this.state.clickCount}</span> flips. there have been <span>{this.state.nHeads}</span> heads. and <span>{this.state.nTails}</span> tails</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Coin;","function choice(arr) {\n  let randomIndex = Math.floor(Math.random() * arr.length);\n  return arr[randomIndex];\n}\n\nexport { choice };\n","import React from 'react';\nimport './App.css';\nimport Coin from './component/Coin'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Coin />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}